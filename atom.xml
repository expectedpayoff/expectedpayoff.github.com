<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[E(X)PECTED P(A)YOFF]]></title>
  <link href="http://expectedpayoff.github.com/atom.xml" rel="self"/>
  <link href="http://expectedpayoff.github.com/"/>
  <updated>2012-06-08T00:48:28-07:00</updated>
  <id>http://expectedpayoff.github.com/</id>
  <author>
    <name><![CDATA[Byron Gibson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to set up DrRacket for The Little Schemer]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/how-to-set-up-drracket-for-the-little-schemer/"/>
    <updated>2012-06-07T21:57:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/how-to-set-up-drracket-for-the-little-schemer</id>
    <content type="html"><![CDATA[<p><a href="http://racket-lang.org/">Racket</a>, formerly PLT Scheme, is one of the easiest Scheme programming environments to set up, making it a convenient environment for learners to use to work through all the problems in <a href="http://www.ccs.neu.edu/home/matthias/BTLS/">The Little Schemer</a>. It only needs two modifications after installation:</p>

<ol>
<li><p>Start DrRacket</p></li>
<li><p>Change the language to Module. In the Language menu at the top (or the bottom left):</p>

<p> <blockquote><p>Language -&gt; Choose Language -&gt; Module -&gt; OK</p></blockquote></p></li>
<li><p>DrRacket lacks the primitive <code>atom?</code> used extensively in The Little Schemer, so you have to define it yourself.  atom? simply returns true if the input is an atom, false if not. In the top window, the Definitions window, add:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define atom? (lambda (a)  (not (list? a))))</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all, you&#8217;re ready to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best soccer/futbol site ever]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/best-soccer-slash-futbol-site-ever/"/>
    <updated>2012-06-07T21:52:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/best-soccer-slash-futbol-site-ever</id>
    <content type="html"><![CDATA[<p>I played soccer from when I was about 9 years old through high school, and have remained a lifelong fan, but despite that I never realized the extent and depth of tactics employed in the game, especially at the highest levels (World Cup, European and English league championships, South America).  Thanks to <a href="http://www.zonalmarking.net/">Zonal Marking</a>, I do now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paul Graham explaining computer programming to a 7th grader]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/paul-graham-explaining-computer-programming-to-a-7th-grader/"/>
    <updated>2012-06-07T21:40:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/paul-graham-explaining-computer-programming-to-a-7th-grader</id>
    <content type="html"><![CDATA[<p>Paul Graham <a href="http://paulgraham.com/int.html">on the profession of programming</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Philip Greenspun on the value of college]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/philip-greenspun-on-the-value-of-college/"/>
    <updated>2012-06-07T21:36:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/philip-greenspun-on-the-value-of-college</id>
    <content type="html"><![CDATA[<p>Noted computer scientist <a href="http://blogs.law.harvard.edu/philg/2010/06/12/americans-lets-stop-investing-in-our-kids/">Philip Greenspun on the comparative value of college</a>, and an interesting <a href="http://news.ycombinator.com/item?id=1427054">discussion among hacker entrepreneurs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steve Yegge on the value of Polyglot Programming]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/steve-yegge-on-the-value-of-polyglot-programming/"/>
    <updated>2012-06-07T21:29:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/steve-yegge-on-the-value-of-polyglot-programming</id>
    <content type="html"><![CDATA[<p><a href="http://sites.google.com/site/steveyegge2/tour-de-babel">Oldie but goodie</a> on the value of polyglot programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solitude, Leadership, and Creativity]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/solitude-leadership-and-creativity/"/>
    <updated>2012-06-07T21:07:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/solitude-leadership-and-creativity</id>
    <content type="html"><![CDATA[<p>One of the <a href="http://theamericanscholar.org/solitude-and-leadership/">best essays</a> I&#8217;ve ever read.</p>

<p>TLDR: Leadership requires depth of understanding, intospection, and capacity for creativity, all of which require solitude to cultivate.</p>

<p>Also <a href="http://news.ycombinator.com/item?id=3627606">reaffirmed by Steve Wozniak</a>, on creativity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Humanity's greatest danger: our inability to understand the exponential function]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/humanitys-greatest-danger-our-inability-to-understand-the-exponential-function/"/>
    <updated>2012-06-07T20:50:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/humanitys-greatest-danger-our-inability-to-understand-the-exponential-function</id>
    <content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=F-QA2rkpBSY">Excellent video lecture</a> from University of Colorado professor Albert Bartlett on the exponential growth function and its real world implications. This should be taught and retaught every year of elementary school through undergraduate education.</p>

<p>In a nutshell, exponential growth occurs anytime an amount increases by n% per t time period. Finance and economics are obvious culprits: 2% inflation per year, 3% economic grown per year, 2% interest on bonds, 20% interest on credit card debt, etc.</p>

<p>The crux of the lecture is that it is easy to calculate the rate at which an amount with constant growth will double: Simply divide 70 by the absolute percent.</p>

<p>For example, GDP growth is 3% per year, how soon till the GDP doubles? 70/3 = 23.3, so 23.3 years until the GDP doubles.</p>

<p>Say population growth is 7% per year, how soon till the population doubles? 70/7 = 10 years.</p>

<p>Say your credit card interest rate is 20%, how soon till the amount you owe doubles? 70/20 = 3.5 years.</p>

<p>This little rule of thumb is immensely useful for interpreting news reports, government proclamations, managing personal finances, and understanding a host of other problems facing the human race over the next century, which Professor Bartlett elaborates on.</p>

<p>Well worth the time to watch it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Theory]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/information-theory/"/>
    <updated>2012-06-07T20:44:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/information-theory</id>
    <content type="html"><![CDATA[<p>Excellent primer on <a href="https://www.eff.org/deeplinks/2010/01/primer-information-theory-and-privacy">information theory</a> from <a href="http://www.eff.org/">EFF</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmingbooks.org]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/programmingbooks-dot-org/"/>
    <updated>2012-06-07T20:33:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/programmingbooks-dot-org</id>
    <content type="html"><![CDATA[<p><a href="http://Programmingbooks.org">Programmingbooks.org</a> is one of my favorite websites, despite being offline since a failed disk and lack of backup lost the data some time ago. Fortunately, <a href="http://web.archive.org/web/20080822052443/http://www.programmingbooks.org/">archive.org preserved it</a>, and the owner intends to get it <a href="http://stackoverflow.com/questions/2779740/what-happened-to-programming-books-com">back online sometime soon.</a></p>

<p>Any kind of technical book generally takes longer to read than other books, since you not only have to work through the problem sets to understand the material, but also reread most of it multiple times, either as part of a <a href="http://www.ewrd.com/ewrd/index.asp">speed-reading method</a> or as you review the material while working on the problems.</p>

<p>A site like this one is invaluable in cutting down the time required to find the books most highly regarded among professional programmers, software engineers, and hackers. Additionally, less noise (marginal and non-programming books) than Amazon and more trustworthy reviews provide an essentially industry-certified curriculum that&#8217;s better than what some schools offer (the <a href="http://www.urbandictionary.com/define.php?term=diploma%20factory">diploma factories</a> and <a href="http://en.wikipedia.org/wiki/Diploma_mill">mills</a>, at least).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advice to Young Engineer/Entrepreneur]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/advice-to-young-engineer-slash-entrepreneur/"/>
    <updated>2012-06-07T19:17:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/advice-to-young-engineer-slash-entrepreneur</id>
    <content type="html"><![CDATA[<p>Just reposting a <a href="http://news.ycombinator.com/item?id=1747713">little gem from HackerNews</a>&#8230;</p>

<blockquote><ol>
<li><p>Be good. Be very good. Don&#8217;t be the &#8220;front-end guy&#8221; or the &#8220;back-end guy&#8221;, or some other &#8220;guy&#8221;. Once you know what you want to build, building software is about five things: algorithms that solve your problem, programming languages that express your algorithms, computer architecture that makes your algorithms run efficiently on real hardware, the practical toolchain, and the management of complexity of real software. So study algorithms, and then graduate algorithms, and then advanced graduate algorithms. Do every challenge problem online. Study programming languages to express those algorithms. You can get away with three: C, Lisp, Haskell. Everything else is crud. Study computer architecture and compilers to see how your programs run efficiently. Learn great tools (Emacs/Vim/Visual Studio/bash/Linux/OS X/Windows whatever - just great ones that you&#8217;re damn good at). Learn how complexity is managed. Look at lare open source projects, study how they&#8217;re organized, and contribute patches to understand how small changes can effect a large system.</p></li>
<li><p>Learn what to build. Once you get really good, your time starts to be more valuable than gold. There will be very few people in the world who are as good (the internet will bias you to think that the world is full of great people - this ain&#8217;t so, there isn&#8217;t enough of &#8216;em). You owe it to people and to yourself not to bother with improving something by 1% or 10% because you&#8217;re wasting time in opportunity cost and could be improving something by 1000%. Make sure what you&#8217;re building is worth building, and make sure every line of code you write is worth writing, otherwise you will fail. Break the NIH syndrome in yourselves now (all good people have it, phenomenal people that build successful companies broke it in themselves). Learn to infer what people want.</p></li>
<li><p>If you&#8217;re that good, you will easily get a $100k job after graduation (probably more by then), and grow to $180k in a few years. That&#8217;s very, very comfortable. It&#8217;s not worth busting your ass 16 hours a day to build another CRM tool when you can have a $180k job. So don&#8217;t start a business to start a business. Start a business to bring a meaningful change in the world. A huge change. A 1000% change. There are lots of hugely successful companies out there that do what&#8217;s not meaningful to you - ignore them. But do make sure that what&#8217;s meaningful to you is also meaningful to millions (hopefully billions) of others. You won&#8217;t get rich writing Lisp compilers.</p></li>
</ol>


<p>  This is what matters. Most everything else is fluff.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Dead Simple Way to Get Up and Running with Lisp in Vim]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/a-dead-simple-way-to-get-up-and-running-with-lisp-in-vim/"/>
    <updated>2012-06-07T15:15:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/a-dead-simple-way-to-get-up-and-running-with-lisp-in-vim</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.google.com/search?q=how+to+use+lisp+with+vim">web is replete</a> with people trying to create, or learn, an efficient workflow for programming Lisp in Vim.  I&#8217;m the latter.  A vim amateur/intermediate, a Lisp noob.<br/>
I want a quick and easy way to hack Lisp in Vim, save it in a file, load it into the REPL, hack some more in the REPL, and push the file to Github, without having to take the time to learn Emacs and <a href="http://common-lisp.net/project/slime/">SLIME</a>, or even <a href="http://www.vim.org/scripts/script.php?script_id=2531">SLIMV</a> (I&#8217;ll get around to these later after I&#8217;ve learned the language somewhat).</p>

<p>My solution:  two terminal windows (three if you want one for vcs commits).  One with vim and your code, the second with a REPL, the third with command prompt in your working/project directory for git commits.</p>

<ol>
<li><p>In vim, make your changes and save :w.  Leave the editor open.</p></li>
<li><p>Alt-tab to the REPL terminal, use (load &#8216;filename.lisp) to reload your code after changing it.</p></li>
<li><p>In the third terminal, add, commit, and push to vcs as necessary.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
