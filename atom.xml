<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[E(X)PECTED P(A)YOFF]]></title>
  <link href="http://expectedpayoff.github.com/atom.xml" rel="self"/>
  <link href="http://expectedpayoff.github.com/"/>
  <updated>2012-06-09T00:25:32-07:00</updated>
  <id>http://expectedpayoff.github.com/</id>
  <author>
    <name><![CDATA[Byron Gibson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[America's Greatest 21st Century Challenge]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/09/americas-greatest-21st-century-challenge/"/>
    <updated>2012-06-09T00:00:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/09/americas-greatest-21st-century-challenge</id>
    <content type="html"><![CDATA[<p>There is a lot of <a href="https://news.ycombinator.com/item?id=4086251">discussion</a> in tech circles recently on the sorry state of US immigration and the dire need for more qualified engineers, computer scientists, matheticians, etc., but much of it misses the bigger picture.  The big picture is that the dominant socioeconomic dynamic of the 21st century will be the competition between the US system and China&#8217;s massive population (and India&#8217;s to a lesser extent) for global economic ascendance.</p>

<p>The US population is ~300 million, China&#8217;s is ~1.2 billion, 4x our size. (India&#8217;s is over 1 billion and the EU is ~400 million, for comparison).  For every engineer, scientist, genius, etc in the US, there are ~4 in China.  Over the long term the US has no hope whatsoever of competing against that without significant structural changes.</p>

<p>Those structural changes include fixing our educational system, fighting tooth and nail for skilled immigrants, offering them better incentives to stay rather than return home to make their fortunes in fast growing developing economies, fixing the broken financial and patent/IP systems, etc.</p>

<p>Judge Posner sums up our strengths and failings well in a <a href="http://www.becker-posner-blog.com/2012/06/capitalismposner.html">recent blog post</a>. It <em>is</em> possible to compete against numbers, but against a numerical as overwhelming as China&#8217;s, the US system will need to be operating at an order of magnitude greater efficiency than it currently is.</p>

<p>Immigration is one of the few crucial advantages the US can exploit in that competition, but right now we&#8217;re shooting ourselves in the foot so hard there we&#8217;re blowing our leg off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Main Problem With Google Plus So Far]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/08/my-main-problem-with-google-plus-so-far/"/>
    <updated>2012-06-08T23:44:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/08/my-main-problem-with-google-plus-so-far</id>
    <content type="html"><![CDATA[<p>Google+ got a <a href="http://googleblog.blogspot.com/2012/04/toward-simpler-more-beautiful-google.html">redesign two months ago</a>.  It&#8217;s nice, I have no major complaints about the new look (except for the huge whitespace beneath the aside portrait/info, but that&#8217;s more aestetic than usability).</p>

<p>However, I do have a major complaint about the fundamental functionality.  The problem with G+ is that you can&#8217;t fine-tune the signal:noise ratio enough.</p>

<!-- more -->


<p>In a nutshell, Facebook is a network of people I know first IRL, so getting pictures of their dinner last night or latest cat&#8217;s antics and other useless stuff I can sort of live with, it goes with the territory.</p>

<p>But G+ is more like Twitter with longer posts - I follow a a lot of people I don&#8217;t know IRL, but only because of a shared interest, and I&#8217;m only interested in their posts on that interest, not the other noise.</p>

<p>Whereas pointless posts on Twitter are only 140 characters, don&#8217;t take up much screen real estate, and are easy to skim and/or skip, that&#8217;s less the case with G+. I really want a way in G+ to filter out posts by those people that don&#8217;t have anything to do with the shared interest.</p>

<p>For example, if I create a &#8220;Functional Programming&#8221; circle and subscribe to a bunch of Haskell, Ocaml, ML, Lisp, and Scheme programmers that I don&#8217;t know IRL, I&#8217;m really not interested in their vacation photos and whatnot. But currently there&#8217;s no way to filter their vacation photo posts from their posts on functional programming.</p>

<p>An effective 90% solution would be to simply add hash tag filtering to circles, so I can instruct my Functional Programming circle to only accept posts with #functional, #functionalprogramming, #haskell, #ocaml, #ml, #lisp, #scheme, and block anything else without at least one of those hash tags in it.</p>

<p>Not quite perfect, and G+&#8217;ers would have to develop the habbit of using hashtags more than they currently do, but it&#8217;s functional and flexible enough and provides the tools necessary for the community to solve this problem themselves.</p>

<p>This is my biggest G+ pain point, and while I have nothing negative to say about this redesign, as long as it doesn&#8217;t solve this one problem, it will do nothing to get me using G+ more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sync Chrome and Chromium Bookmarks locally with git]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/08/sync-chrome-and-chromium-bookmarks-locally-with-git/"/>
    <updated>2012-06-08T18:24:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/08/sync-chrome-and-chromium-bookmarks-locally-with-git</id>
    <content type="html"><![CDATA[<p>If you use both <a href="https://www.google.com/chrome">Google Chrome</a> browser and its upstream development version, <a href="http://www.chromium.org/">Chromium</a>, on the same machine, you may, like me, want a way to sync your Bookmarks between the two locally, without using some third party cloud sync/backup service.</p>

<p>Well there&#8217;s an easy way to do this with a software version control control system like Git, Mercurial, Subversion, etc.  I use Linux and Git, but this technique should work on any operating system with any version control system.</p>

<!-- more -->


<p>There are three pertinent filesystem locations - the Chrome Bookmarks file, the Chromium Bookmarks file, and the Git repo you will create to sync the two:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/.config/google-chrome/Default/Bookmarks
</span><span class='line'>~/.config/chromium/Default/Bookmarks
</span><span class='line'>~/bin/backup/bookmarks/chromium/Bookmarks.git</span></code></pre></td></tr></table></div></figure>


<p>Howto:</p>

<ol>
<li>Create a bare git repository that will serve as the parent or hub for syncing the two Bookmarks files.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; mkdir -p ~/bin/backup/bookmarks/chromium/ && cd ~/bin/backup/bookmarks/chrome-ium
</span><span class='line'>$&gt; git --bare init Bookmarks.git</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li>Initialize a child git repository in each of Chrome and Chromium&#8217;s settings directories where the Bookmarks file resides.<br/>
Primary browser (Chromium, for this example):</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; $&gt; cd ~/.config/chromium/Default
</span><span class='line'>$&gt; git init</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Set remote origin to the hub repo for both.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git remote add origin ~/bin/backup/bookmarks/chrome-ium/Bookmarks.git</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Include a <code>.gitignore</code> file that ignores everything except &#8216;Bookmarks&#8217; and &#8216;.gitignore&#8217;.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; vim .gitignore</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*
</span><span class='line'>!Bookmarks
</span><span class='line'>!.gitignore</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Add, Commit, and Push the Bookmarks repo of your primary browser (say Chromium).  Pull the repo to your secondary browser (Chrome in this case).</li>
</ol>


<p>Primary browser (Chromium for this example):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git add -A  (should only add the files "Bookmarks" and ".gitignore", no others.  Verify with 'git status')
</span><span class='line'>$&gt; git commit -m 'init'
</span><span class='line'>$&gt; git pull origin master
</span><span class='line'>$&gt; git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p>Secondary browser (Chrome for this example)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git remote add origin ~/bin/backup/bookmarks/chrome-ium/Bookmarks.git
</span><span class='line'>$&gt; git add -A  (should only add the files "Bookmarks" and ".gitignore", no others.  Verify with 'git status')
</span><span class='line'>$&gt; git commit -m 'init'
</span><span class='line'>$&gt; git pull origin master</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The tricky part - Chrome and Chromium both calculate the hash of the Bookmark file every time it is changed from within the browser, and add that hash as the first entry in the top of the Bookmarks file.  It is included in every new hash as well.  If that recorded hash does not match the calculated hash when Chrome/ium starts up, it will assume the file is corrupt and fall back to Bookmarks.bak instead.  Hence, you have to be careful when synching - you can never merge the remote hub repo if you have made changes locally, or it will cause the calculated hash to diverge from the recorded one, and Chrome/ium will think the file is corrupt and will ignore it in favor of the older Bookmarks.bak.  The simple solution is to make sure that when you add new bookmarks to one, you also pull those changes into the other browser before adding new bookmarks to the other.</li>
</ol>


<p>I&#8217;m working on a post-commit hook that will automatically do this, but not done yet.</p>

<p>Done.  Now whenever you add bookmarks to one browser, keep the parent repo updated with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; cd ~/.config/[browser]/Default
</span><span class='line'>$&gt; git add -A
</span><span class='line'>$&gt; git commit -m 'update'
</span><span class='line'>$&gt; git pull origin master
</span><span class='line'>$&gt; git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>And finally just remember to also do a <code>git pull origin master</code> from the other browser <em>before</em> adding any new bookmarks to it as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Multiple Java, Scala, Haskell, etc. packages in Debian with Update Alternatives]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/08/manage-multiple-java/"/>
    <updated>2012-06-08T13:53:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/08/manage-multiple-java</id>
    <content type="html"><![CDATA[<p>Sun/Oracle Java was <a href="http://askubuntu.com/questions/67909/how-do-i-install-oracle-jdk-6">removed from Linux distros</a> in 2011 due to licensing issues.<br/>
It can only be downloaded directly from Oracle&#8217;s website now and installed manually.
There are many different ways of doing that, but for Debian and Debian-derivatives,
I prefer using Debian&#8217;s excellent <code>update-alternatives</code> tool.</p>

<!-- more -->


<h4><a href="https://github.com/byrongibson/scripts/tree/master/install/haskell#readme">How To</a></h4>

<ol>
<li><p>Download the package, extract or build to <code>/usr/lib/jvm/[version]</code>,
<code>/opt/java/[version]</code>, <code>/opt/scala/[version]</code>, <code>/opt/haskell/[version]</code>,
or anywhere else in the system file system (except <code>~/</code>).</p></li>
<li><p>Change owner:group to root:root</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chown -Rv root:root /opt/java/[version]</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Run the <code>update-alternatives</code> script (<a href="https://github.com/byrongibson/scripts/tree/master/install/java">Java</a>, <a href="https://github.com/byrongibson/scripts/tree/master/install/scala">Scala</a>, <a href="https://github.com/byrongibson/scripts/tree/master/install/haskell">Haskell</a>). Feel
free to fork and modify for other languages.</li>
</ol>


<p>See my installation guide for <a href="https://github.com/byrongibson/scripts/tree/master/install/haskell#readme">Haskell</a> for more details. The same process works
for any package.  The tricky part is writing the <code>update-alternatives</code> script, but it
should be clear how it works upon closer inspection of those scripts.</p>

<p>The <code>update-alternatives</code> commands take the form:</p>

<figure class='code'><figcaption><span>Install </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>update-alternatives --install [destination] [identifier] [source] [priority] \
</span><span class='line'> --slave [destination] [identifier] [source] \
</span><span class='line'> ...
</span><span class='line'> --slave [destination] [identifier] [source]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Change active package </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>update-alternatives --config [identifier]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Remove all </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>update-alternatives --remove [identifier]</span></code></pre></td></tr></table></div></figure>




<div><script src='https://gist.github.com/2898928.js?file='></script>
<noscript><pre><code>#!/usr/bin/env bash -

# install haskell GHC to the system via Debian update-alternatives

BIN=&quot;/usr/bin&quot;
MAN=&quot;/usr/share/man&quot;
GHC=&quot;/opt/haskell/ghc/7.4.1&quot;
GHC_BIN=&quot;$GHC/bin&quot;
GHC_MAN=&quot;$GHC/share/man&quot;
PRIORITY_LEVEL=1200

update-alternatives --install $BIN/ghc ghc $GHC_BIN/ghc $PRIORITY_LEVEL \
 --slave $BIN/ghci ghci $GHC_BIN/ghci \
 --slave $BIN/ghc-pkg ghc-pkg $GHC_BIN/ghc-pkg \
 --slave $BIN/haddock haddock $GHC_BIN/haddock \
 --slave $BIN/hp2ps hp2ps $GHC_BIN/hp2ps \
 --slave $BIN/hpc hpc $GHC_BIN/hpc \
 --slave $BIN/hsc2hs hsc2hs $GHC_BIN/hsc2hs \
 --slave $BIN/runghc runghc $GHC_BIN/runghc \
 --slave $BIN/runhaskell runhaskell $GHC_BIN/runhaskell \
 --slave $MAN/man9 man.ghc $GHC_MAN/man1</code></pre></noscript></div>


<p>Read on for why&#8230;</p>

<!-- more -->


<h4><a href="https://github.com/byrongibson/scripts/tree/master/install/haskell#readme">Why?</a></h4>

<ol>
<li><p>It can be used with any package, not just Java.  I currently use it to manage
multiple versions of Java, Scala, Haskell GHC, Haskell Platform, Ant, and Maven.</p></li>
<li><p>Debian repos are known for providing stable software, but sometimes at the cost of
being up to date.  Great for production machines, not so great when you want to
experiment with the latest and greatest on your dev box.  <code>update-alternatives</code>
solves that, by letting you easily bypass the repos to manually add current versions
of software to the system (linking them into /usr/bin/, /usr/lib, /usr/share, etc.)
without conflicting with the version from the repos.  With <code>update-alternatives</code> you
can install both, and toggle among the active one depending on what you&#8217;re working on.</p></li>
<li><p>Upgrade to a new version without deleting the old.  Both can co-exist on the system
at the same time, unlike installing the software via repo.  If the new version breaks
something that depends on it, easily rollback to the prior version with just a
<code>sudo update-alternatives --config</code>.</p></li>
<li><p>Keep your system cleaner by putting software in a single location like
/opt/java/jdk/1.6.0_34 and soft linking it to system directories like /usr/bin,
/usr/lib, /usr/share, etc.  A typical *nix install is messy - files are deposited
throughout the system in /usr/bin, /usr/lib, /usr/share, etc.  <code>update-alternatives</code>
solves that problem.</p></li>
<li><p>Easily uninstall any package.  For example, switch the current active package to
another version with <code>update-alternatives --config java</code> and delete the unwanted one
with <code>rm -rf /opt/java/jdk/1.7.0_04</code>.</p></li>
<li><p>Run the software via System PATH instead of user PATH.  <code>update-alternatives</code>
automatically installs software to the system path it is designed for, usually
/usr/bin.</p></li>
</ol>


<h4>Final Thoughts</h4>

<p>This system reminds me a bit of <a href="http://www.gobolinux.org/">Gobo Linux</a>, which seeks to [redesign the Linux
filesystem][7] by putting full package distributions in a single location, like
<code>/Programs/Bash/3.0</code>.  A great idea that would make Linux much more user-friendly.
<code>update-alternatives</code> is one small step in that direction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up DrRacket for The Little Schemer]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/how-to-set-up-drracket-for-the-little-schemer/"/>
    <updated>2012-06-07T21:57:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/how-to-set-up-drracket-for-the-little-schemer</id>
    <content type="html"><![CDATA[<p><a href="http://racket-lang.org/">Racket</a>, formerly PLT Scheme, is one of the easiest Scheme programming environments to set up, making it a convenient environment for learners to use to work through all the problems in <a href="http://www.ccs.neu.edu/home/matthias/BTLS/">The Little Schemer</a>. It only needs two modifications after installation:</p>

<ol>
<li><p>Start DrRacket</p></li>
<li><p>Change the language to Module. In the Language menu at the top (or the bottom left):</p>

<p> <blockquote><p>Language -&gt; Choose Language -&gt; Module -&gt; OK</p></blockquote></p></li>
<li><p>DrRacket lacks the primitive <code>atom?</code> used extensively in The Little Schemer, so you have to define it yourself.  atom? simply returns true if the input is an atom, false if not. In the top window, the Definitions window, add:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define atom? (lambda (a)  (not (list? a))))</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all, you&#8217;re ready to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best soccer/futbol site ever]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/best-soccer-slash-futbol-site-ever/"/>
    <updated>2012-06-07T21:52:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/best-soccer-slash-futbol-site-ever</id>
    <content type="html"><![CDATA[<p>I played soccer from when I was about 9 years old through high school, and have remained a lifelong fan, but despite that I never realized the extent and depth of tactics employed in the game, especially at the highest levels (World Cup, European and English league championships, South America).  Thanks to <a href="http://www.zonalmarking.net/">Zonal Marking</a>, I do now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Linux is better than Windows]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/why-linux-is-better-than-windows/"/>
    <updated>2012-06-07T21:42:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/why-linux-is-better-than-windows</id>
    <content type="html"><![CDATA[<p><a href="http://www.whylinuxisbetter.net/">The ways in which Linux &gt; Windows:</a></p>

<ol>
<li>More stable</li>
<li>Less virus, trojan, &amp; security risk</li>
<li>Security through <a href="http://en.wikipedia.org/wiki/Security_through_transparency">transparency</a> and (for now)<a href="http://en.wikipedia.org/wiki/Security_through_minority#Security_through_minority">minority</a> vs <a href="http://en.wikipedia.org/wiki/Security_through_obscurity">Security through obscurity</a></a></li>
<li><a href="http://c2.com/cgi/wiki?GratisSoftware">free</a></li>
<li><a href="http://en.wikipedia.org/wiki/Gratis_versus_Libre%22">Free</a></li>
<li>Update all your software, not just the OS, with one-click</li>
<li>Tens of thousands ofeasy-to-getf/Free software packages available in the online, repositories</li>
<li>Next-generation desktops (Compiz Fusion, etc.)</li>
<li>Never defragment your hard drive again</li>
<li>Your system never slows down over months and years of useage</li>
<li>Theme your desktop (with more than just 3 themes)</li>
<li>Less ecological impact - no boxed software, no CDs, download everything online.</li>
<li>Be part of an emerging global community</li>
<li><a href="http://www.whylinuxisbetter.net/">More&#8230;</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paul Graham explaining computer programming to a 7th grader]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/paul-graham-explaining-computer-programming-to-a-7th-grader/"/>
    <updated>2012-06-07T21:40:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/paul-graham-explaining-computer-programming-to-a-7th-grader</id>
    <content type="html"><![CDATA[<p>Paul Graham <a href="http://paulgraham.com/int.html">on the profession of programming</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Philip Greenspun on the value of college]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/philip-greenspun-on-the-value-of-college/"/>
    <updated>2012-06-07T21:36:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/philip-greenspun-on-the-value-of-college</id>
    <content type="html"><![CDATA[<p>Noted computer scientist <a href="http://blogs.law.harvard.edu/philg/2010/06/12/americans-lets-stop-investing-in-our-kids/">Philip Greenspun on the comparative value of college</a>, and an interesting <a href="http://news.ycombinator.com/item?id=1427054">discussion among hacker entrepreneurs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steve Yegge on the value of Polyglot Programming]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/steve-yegge-on-the-value-of-polyglot-programming/"/>
    <updated>2012-06-07T21:29:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/steve-yegge-on-the-value-of-polyglot-programming</id>
    <content type="html"><![CDATA[<p><a href="http://sites.google.com/site/steveyegge2/tour-de-babel">Oldie but goodie</a> on the value of polyglot programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top Programming Lessons in Ten Years]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/top-programming-lessons-in-ten-years/"/>
    <updated>2012-06-07T21:13:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/top-programming-lessons-in-ten-years</id>
    <content type="html"><![CDATA[<p><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years">Good observations</a> on the profession of programming. Summary:</p>

<ol>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_1">Break it down.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_2">Your requirements will change.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_3">Obey Gall&#8217;s Law.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_4">Document as you go.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_5">Use version control.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_6">Maintain separate development and production environments.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_7">Backup and restore.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_8">Leave your code in a working state at the end of every day.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_9">If you can&#8217;t figure out a problem, walk away.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_10">Fix bugs first.</a></li>
<li><a href="http://quandyfactory.com/blog/41/top_10_programming_lessons_in_10_years#toc_11">Communicate, communicate, communicate.</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solitude, Leadership, and Creativity]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/solitude-leadership-and-creativity/"/>
    <updated>2012-06-07T21:07:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/solitude-leadership-and-creativity</id>
    <content type="html"><![CDATA[<p>One of the <a href="http://theamericanscholar.org/solitude-and-leadership/">best essays</a> I&#8217;ve ever read.</p>

<p>TLDR: Leadership requires depth of understanding, intospection, and capacity for creativity, all of which require solitude to cultivate.</p>

<p>Also <a href="http://news.ycombinator.com/item?id=3627606">reaffirmed by Steve Wozniak</a>, on creativity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Complex Costs of War]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/the-complex-costs-of-war/"/>
    <updated>2012-06-07T20:54:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/the-complex-costs-of-war</id>
    <content type="html"><![CDATA[<p><a href="http://nancysherman.com/">Nancy Sherman</a> was the first Distinguished Chair in Ethics at the U.S. Naval Academy andis currently University Professor of Philosophy at Georgetown. <a href="http://opinionator.blogs.nytimes.com/2010/05/30/a-crack-in-the-stoic-armor/?src=me&amp;amp;ref=homepage%22">Her article</a> in the NY Times today discusses the subtle, complex, confusing costs to civilized people tasked to fight our modern wars.</p>

<p>&#8220;In the military, even those who have never laid eyes on a page of <a href="http://en.wikipedia.org/wiki/Epictetus">Epictetus</a>, still live as if they have. To suck it up is to move beyond grieving and keep fighting; it is to stare death down in a death-saturated place; it is to face one more deployment after two or three or four already. It is hard to imagine a popular philosophy better suited to deprivation and constant subjection to stressors [than <a href="http://en.wikipedia.org/wiki/Stoicism">Stoicism</a>].</p>

<p>And yet in the more than 30 interviews I conducted with soldiers who have returned from the long current wars, what I heard was the wish to let go of the Stoic armor. They wanted to feel and process the loss. They wanted to register the complex inner moral landscape of war by finding some measure of empathy with their own emotions.&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Humanity's greatest danger: our inability to understand the exponential function]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/humanitys-greatest-danger-our-inability-to-understand-the-exponential-function/"/>
    <updated>2012-06-07T20:50:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/humanitys-greatest-danger-our-inability-to-understand-the-exponential-function</id>
    <content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=F-QA2rkpBSY">Excellent video lecture</a> from University of Colorado professor Albert Bartlett on the exponential growth function and its real world implications. This should be taught and retaught every year of elementary school through undergraduate education.</p>

<p>In a nutshell, exponential growth occurs anytime an amount increases by n% per t time period. Finance and economics are obvious culprits: 2% inflation per year, 3% economic grown per year, 2% interest on bonds, 20% interest on credit card debt, etc.</p>

<p>The crux of the lecture is that it is easy to calculate the rate at which an amount with constant growth will double: Simply divide 70 by the absolute percent.</p>

<p>For example, GDP growth is 3% per year, how soon till the GDP doubles? 70/3 = 23.3, so 23.3 years until the GDP doubles.</p>

<p>Say population growth is 7% per year, how soon till the population doubles? 70/7 = 10 years.</p>

<p>Say your credit card interest rate is 20%, how soon till the amount you owe doubles? 70/20 = 3.5 years.</p>

<p>This little rule of thumb is immensely useful for interpreting news reports, government proclamations, managing personal finances, and understanding a host of other problems facing the human race over the next century, which Professor Bartlett elaborates on.</p>

<p>Well worth the time to watch it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Theory]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/information-theory/"/>
    <updated>2012-06-07T20:44:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/information-theory</id>
    <content type="html"><![CDATA[<p>Excellent primer on <a href="https://www.eff.org/deeplinks/2010/01/primer-information-theory-and-privacy">information theory</a> from <a href="http://www.eff.org/">EFF</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmingbooks.org]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/programmingbooks-dot-org/"/>
    <updated>2012-06-07T20:33:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/programmingbooks-dot-org</id>
    <content type="html"><![CDATA[<p><a href="http://Programmingbooks.org">Programmingbooks.org</a> is one of my favorite websites, despite being offline since a failed disk and lack of backup lost the data some time ago. Fortunately, <a href="http://web.archive.org/web/20080822052443/http://www.programmingbooks.org/">archive.org preserved it</a>, and the owner intends to get it <a href="http://stackoverflow.com/questions/2779740/what-happened-to-programming-books-com">back online sometime soon.</a></p>

<p>Any kind of technical book generally takes longer to read than other books, since you not only have to work through the problem sets to understand the material, but also reread most of it multiple times, either as part of a <a href="http://www.ewrd.com/ewrd/index.asp">speed-reading method</a> or as you review the material while working on the problems.</p>

<p>A site like this one is invaluable in cutting down the time required to find the books most highly regarded among professional programmers, software engineers, and hackers. Additionally, less noise (marginal and non-programming books) than Amazon and more trustworthy reviews provide an essentially industry-certified curriculum that&#8217;s better than what some schools offer (the <a href="http://www.urbandictionary.com/define.php?term=diploma%20factory">diploma factories</a> and <a href="http://en.wikipedia.org/wiki/Diploma_mill">mills</a>, at least).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advice to Young Engineer/Entrepreneur]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/advice-to-young-engineer-slash-entrepreneur/"/>
    <updated>2012-06-07T19:17:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/advice-to-young-engineer-slash-entrepreneur</id>
    <content type="html"><![CDATA[<p>Just reposting a <a href="http://news.ycombinator.com/item?id=1747713">little gem from HackerNews</a>&#8230;</p>

<blockquote><ol>
<li><p>Be good. Be very good. Don&#8217;t be the &#8220;front-end guy&#8221; or the &#8220;back-end guy&#8221;, or some other &#8220;guy&#8221;. Once you know what you want to build, building software is about five things: algorithms that solve your problem, programming languages that express your algorithms, computer architecture that makes your algorithms run efficiently on real hardware, the practical toolchain, and the management of complexity of real software. So study algorithms, and then graduate algorithms, and then advanced graduate algorithms. Do every challenge problem online. Study programming languages to express those algorithms. You can get away with three: C, Lisp, Haskell. Everything else is crud. Study computer architecture and compilers to see how your programs run efficiently. Learn great tools (Emacs/Vim/Visual Studio/bash/Linux/OS X/Windows whatever - just great ones that you&#8217;re damn good at). Learn how complexity is managed. Look at lare open source projects, study how they&#8217;re organized, and contribute patches to understand how small changes can effect a large system.</p></li>
<li><p>Learn what to build. Once you get really good, your time starts to be more valuable than gold. There will be very few people in the world who are as good (the internet will bias you to think that the world is full of great people - this ain&#8217;t so, there isn&#8217;t enough of &#8216;em). You owe it to people and to yourself not to bother with improving something by 1% or 10% because you&#8217;re wasting time in opportunity cost and could be improving something by 1000%. Make sure what you&#8217;re building is worth building, and make sure every line of code you write is worth writing, otherwise you will fail. Break the NIH syndrome in yourselves now (all good people have it, phenomenal people that build successful companies broke it in themselves). Learn to infer what people want.</p></li>
<li><p>If you&#8217;re that good, you will easily get a $100k job after graduation (probably more by then), and grow to $180k in a few years. That&#8217;s very, very comfortable. It&#8217;s not worth busting your ass 16 hours a day to build another CRM tool when you can have a $180k job. So don&#8217;t start a business to start a business. Start a business to bring a meaningful change in the world. A huge change. A 1000% change. There are lots of hugely successful companies out there that do what&#8217;s not meaningful to you - ignore them. But do make sure that what&#8217;s meaningful to you is also meaningful to millions (hopefully billions) of others. You won&#8217;t get rich writing Lisp compilers.</p></li>
</ol>


<p>  This is what matters. Most everything else is fluff.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Dead Simple Way to Get Up and Running with Lisp in Vim]]></title>
    <link href="http://expectedpayoff.github.com/blog/2012/06/07/a-dead-simple-way-to-get-up-and-running-with-lisp-in-vim/"/>
    <updated>2012-06-07T15:15:00-07:00</updated>
    <id>http://expectedpayoff.github.com/blog/2012/06/07/a-dead-simple-way-to-get-up-and-running-with-lisp-in-vim</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.google.com/search?q=how+to+use+lisp+with+vim">web is replete</a> with people trying to create, or learn, an efficient workflow for programming Lisp in Vim.  I&#8217;m the latter.  A vim amateur/intermediate, a Lisp noob.<br/>
I want a quick and easy way to hack Lisp in Vim, save it in a file, load it into the REPL, hack some more in the REPL, and push the file to Github, without having to take the time to learn Emacs and <a href="http://common-lisp.net/project/slime/">SLIME</a>, or even <a href="http://www.vim.org/scripts/script.php?script_id=2531">SLIMV</a> (I&#8217;ll get around to these later after I&#8217;ve learned the language somewhat).</p>

<p>My solution:  two terminal windows (three if you want one for vcs commits).  One with vim and your code, the second with a REPL, the third with command prompt in your working/project directory for git commits.</p>

<ol>
<li><p>In vim, make your changes and save :w.  Leave the editor open.</p></li>
<li><p>Alt-tab to the REPL terminal, use (load &#8216;filename.lisp) to reload your code after changing it.</p></li>
<li><p>In the third terminal, add, commit, and push to vcs as necessary.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
